{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/chat/chat.component.css","webpack:///./src/app/chat/chat.component.html","webpack:///./src/app/chat/chat.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/message.model.ts","webpack:///./src/app/sidenav/sidenav.component.css","webpack:///./src/app/sidenav/sidenav.component.html","webpack:///./src/app/sidenav/sidenav.component.ts","webpack:///./src/app/user.model.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".toolbar-icon {\\n    padding: 0 14px;\\n}\\n\\n.toolbar-spacer {\\n    flex: 1 1 auto;\\n}\\n\\n.m-container {\\n    position: absolute;\\n    top: 60px;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n}\\n\\n.m-container-footer {\\n    bottom: 60px;\\n}\\n\\n.m-sidenav {\\n    max-width: 50%;\\n}\\n\\n.m-header {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n}\\n\\n.m-footer {\\n    position: fixed;\\n    bottom: 0;\\n    left: 0;\\n    right: 0;\\n}\\n\\nmat-toolbar-row>.mat-form-field {\\n    width: 100%\\n}\"","module.exports = \"<mat-toolbar color=\\\"primary\\\" class=\\\"m-header\\\">\\n  <button mat-icon-button (click)=\\\"sidenav.toggle()\\\" *ngIf=\\\"logged\\\"><mat-icon>menu</mat-icon></button>\\n  <span>Client{{ logged ? ' ' : ' Login' }}</span>\\n  <span class=\\\"toolbar-spacer\\\"></span>\\n  <button mat-icon-button [matMenuTriggerFor]=\\\"menu\\\" *ngIf=\\\"logged\\\">\\n    <mat-icon>more_vert</mat-icon>\\n  </button>\\n  <mat-menu #menu=\\\"matMenu\\\">\\n    <button mat-menu-item (click)=\\\"onLogout()\\\">\\n      <mat-icon>power_settings_new</mat-icon>\\n      <span>Logout</span>\\n    </button>\\n  </mat-menu>\\n</mat-toolbar>\\n<mat-sidenav-container class=\\\"m-container\\\" [ngClass]=\\\"{'m-container-footer': logged}\\\">\\n  <mat-sidenav class=\\\"m-sidenav\\\" #sidenav [mode]=\\\"'over'\\\" [fixedInViewport]=\\\"true\\\" [fixedTopGap]=\\\"0\\\"\\n  [fixedBottomGap]=\\\"0\\\">\\n    <app-sidenav [sidenav]=\\\"sidenav\\\" [user]=\\\"user\\\"></app-sidenav>\\n  </mat-sidenav>\\n  <mat-sidenav-content [scrollTop]=\\\"scrollBottom()\\\">\\n    <app-login *ngIf=\\\"!logged\\\" (logged)=\\\"onLogin($event)\\\"></app-login>\\n    <app-chat *ngIf=\\\"logged\\\" [user]=\\\"user\\\" [messages]=\\\"messages\\\" #chat></app-chat>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n<mat-toolbar class=\\\"m-footer\\\" *ngIf=\\\"logged\\\">\\n  <mat-toolbar-row>\\n    <mat-form-field>\\n      <mat-label></mat-label>\\n      <input matInput placeholder=\\\"Mensaje\\\" [(ngModel)]=\\\"msg\\\" (keyup.enter)=\\\"send()\\\" autocomplete=\\\"off\\\" autofocus>\\n      <mat-icon matSuffix (click)=\\\"send()\\\">send</mat-icon>\\n    </mat-form-field>\\n  </mat-toolbar-row>\\n</mat-toolbar>\"","import { Component, ViewChild, ElementRef, AfterViewChecked, OnInit, NgZone } from '@angular/core';\nimport { User } from './user.model';\nimport { Message } from './message.model';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  @ViewChild('chat') chatComponent: ElementRef;\n\n  logged = false;\n  user: User;\n  msg = '';\n  messages: Message[] = [];\n  conn: WebSocket;\n  status = 'Conectando...';\n\n  // Connection\n  ip = window.location.hostname; // window.location.hostname or ip\n  secure = false;\n  port = 3000;\n\n  constructor(private zone: NgZone) {}\n\n  ngOnInit() {\n    console.log(this.messages);\n    this.connect();\n  }\n\n  connect() {\n    const protocol = this.secure ? 'wss' : 'ws';\n    this.conn = new WebSocket(`${protocol}://${this.ip}:${this.port}`);\n    this.conn.onopen = this.wsOnOpen;\n    this.conn.onerror = this.wsOnError;\n    this.conn.onmessage = (ev: MessageEvent) => {\n      this.addMessage(ev.data);\n    };\n    this.conn.onclose = this.wsOnClose;\n  }\n\n  wsOnOpen(ev: Event) {\n    console.log('Connected!');\n    this.status = 'Conectado!';\n  }\n\n  wsOnError(ev: Event) {\n    console.log('WebSocket Error ' + ev);\n  }\n\n  addMessage(msg: any) {\n    const obj = JSON.parse(msg);\n    const message = new Message(obj.username, new Date(+obj.timestamp), obj.data);\n    this.messages.push(message);\n    this.scrollBottom();\n  }\n\n  wsOnClose() {\n    console.log('Disconnected!');\n  }\n\n  send() {\n    if (this.msg === '') {\n      return;\n    }\n    const message = new Message(this.user.name, new Date(), this.msg);\n    this.conn.send(JSON.stringify(message));\n    this.msg = '';\n  }\n\n  onLogin(user: User) {\n    this.user = user;\n    this.logged = true;\n    console.log('Logged with username ' + this.user.name);\n  }\n\n  onLogout() {\n    this.conn.close();\n    this.messages = [];\n    this.msg = '';\n    this.user = undefined;\n    this.logged = false;\n    console.log('Logged out');\n  }\n\n  scrollBottom() {\n    const el = document.getElementsByTagName('mat-list')[0] as HTMLElement;\n    if (!el) {\n      return 0;\n    }\n    return el.clientHeight;\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\n\nimport {\n  MatIconModule,\n  MatToolbarModule,\n  MatCardModule,\n  MatButtonModule,\n  MatSidenavModule,\n  MatRadioModule,\n  MatMenuModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatInputModule\n} from '@angular/material';\n\nimport { AppComponent } from './app.component';\nimport { Browser } from 'protractor';\nimport { LoginComponent } from './login/login.component';\nimport { ChatComponent } from './chat/chat.component';\nimport { SidenavComponent } from './sidenav/sidenav.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    ChatComponent,\n    SidenavComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatRadioModule,\n    MatMenuModule,\n    MatListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".main-card.ex  {\\n    max-width: 400px;\\n}\\n\\n.example-header-image {\\n    background-image: url('https://material.angular.io/assets/img/examples/shiba1.jpg');\\n    background-size: cover;\\n}\"","module.exports = \"<mat-list>\\n  <mat-list-item *ngFor=\\\"let msg of messages\\\">\\n    <div matLine>\\n      <b>{{msg.username}} </b>\\n      <mat-hint>{{msg.date | date:'HH:mm'}} </mat-hint>\\n    </div>\\n    <span matLine>{{msg.data}}</span>\\n    <mat-divider></mat-divider>\\n  </mat-list-item>\\n</mat-list>\"","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\nimport { User } from '../user.model';\nimport { Message } from '../message.model';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent implements OnInit {\n\n  @Input() user: User;\n  @Input() messages: Message[];\n\n  @ViewChild('list') list: ElementRef;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".Aligner {\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n}\\n\\n.Aligner-item {\\n    max-width: 50%;\\n}\\n\"","module.exports = \"<br><br>\\n<div class=\\\"Aligner\\\">\\n  <div class=\\\"Aligner-item\\\">\\n    <mat-form-field>\\n      <input matInput placeholder=\\\"Username\\\" [(ngModel)]=\\\"username\\\" type=\\\"text\\\" required>\\n      <mat-error *ngIf=\\\"!username\\\">Ingresa un nombre de usuario</mat-error>\\n    </mat-form-field>\\n    <br>\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"login()\\\" [disabled]=\\\"!username\\\">Login</button>\\n  </div>\\n</div>\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { User } from '../user.model';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  @Output() logged = new EventEmitter<User>();\n  user = new User();\n  username: string;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  login() {\n    this.user.name = this.username;\n    this.logged.emit(this.user);\n  }\n\n}\n","export class Message {\n    username: string;\n    timestamp: string;\n    data: string;\n    constructor(username: string, timestamp: Date, data: string) {\n        this.username = username;\n        this.timestamp = timestamp.getTime() + '';\n        this.data = data;\n    }\n    get date() {\n        return new Date(+this.timestamp);\n    }\n}\n","module.exports = \"\"","module.exports = \"<mat-toolbar>\\n    <span>{{ user ? user.name : '' }}</span>\\n</mat-toolbar>\\n<mat-nav-list>\\n    <h3 mat-subheader>Folders</h3>\\n    <mat-list-item *ngFor=\\\"let folder of folders\\\">\\n        <mat-icon mat-list-icon>folder</mat-icon>\\n        <h4 mat-line>{{folder.name}}</h4>\\n        <p mat-line> {{folder.updated | date}} </p>\\n    </mat-list-item>\\n    <mat-divider></mat-divider>\\n    <h3 mat-subheader>Notes</h3>\\n    <mat-list-item *ngFor=\\\"let note of notes\\\">\\n        <mat-icon mat-list-icon>note</mat-icon>\\n        <h4 mat-line>{{note.name}}</h4>\\n        <p mat-line> {{note.updated | date}} </p>\\n    </mat-list-item>\\n</mat-nav-list>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { MatSidenav } from '@angular/material';\nimport { User } from '../user.model';\n\nexport interface Section {\n  name: string;\n  updated: Date;\n}\n\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.css']\n})\nexport class SidenavComponent implements OnInit {\n\n  @Input() user: User;\n  @Input() sidenav: MatSidenav;\n\n  folders: Section[] = [\n    {\n      name: 'Photos',\n      updated: new Date('1/1/16'),\n    },\n    {\n      name: 'Recipes',\n      updated: new Date('1/17/16'),\n    },\n    {\n      name: 'Work',\n      updated: new Date('1/28/16'),\n    }\n  ];\n  notes: Section[] = [\n    {\n      name: 'Vacation Itinerary',\n      updated: new Date('2/20/16'),\n    },\n    {\n      name: 'Kitchen Remodel',\n      updated: new Date('1/18/16'),\n    }\n  ];\n\n  constructor() { }\n\n  ngOnInit() {}\n\n}\n","export class User {\n    name: string;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}